package pepse.world;

import danogl.collisions.GameObjectCollection;
import danogl.gui.rendering.RectangleRenderable;
import danogl.util.Vector2;
import pepse.util.ColorSupplier;
import pepse.util.PerlinNoise;

import java.awt.*;

/**
 * Produces all the necessary blocks for the game.
 * In addition, It allows other objects to know what the height of the ground is at a given X coordinate.
 */
public class Terrain {
    private static final double HEIGHT_MULTIPLIER = 10;
    private static final int LOOKS_GOOD_SEED = 508; // seed which results in a good terrain
    private static final double CONTINUOUS_COEFFICIENT = 0.05f; // makes terrain look more "continuous"
    private final GameObjectCollection gameObjects;
    private final int groundLayer;
    private final float groundHeightAtX0;
    private final PerlinNoise noiseGenerator;
    private static final Color BASE_GROUND_COLOR = new Color(212, 123, 74);
    private static final int TERRAIN_DEPTH = 20;


    /**
     * Constructor for Terrain.
     *
     * @param gameObjects all game objects in the game.
     * @param groundLayer the layer of the ground blocks.
     * @param seed initializes random number generator.
     */
    public Terrain(GameObjectCollection gameObjects, int groundLayer, Vector2 windowDimensions, int seed) {
        this.gameObjects = gameObjects;
        this.groundLayer = groundLayer;
        groundHeightAtX0 = windowDimensions.y() - Block.SIZE;
        int seed1 = seed + LOOKS_GOOD_SEED;
        this.noiseGenerator = new PerlinNoise(seed1);
    }

    /**
     * Gets the ground height (y coordinate) at given x coordinate.
     * @param x coordinate.
     * @return ground height.
     */
    public float groundHeightAt(float x) {
        int generatedHeight =
                (int) (Math.abs(noiseGenerator.noise(CONTINUOUS_COEFFICIENT*x)) * HEIGHT_MULTIPLIER) * Block.SIZE;
        return (this.groundHeightAtX0 - generatedHeight);
    }

    /**
     * Creates ground blocks at given x range.
     * @param minX first x value in range.
     * @param maxX last x value in range.
     */
    public void createInRange(int minX, int maxX) {
        for (int xValue = minX; xValue < maxX; xValue += Block.SIZE) {
            RectangleRenderable rectangleRenderable =
                    new RectangleRenderable(ColorSupplier.approximateColor(BASE_GROUND_COLOR));
            float groundHeightAtX = groundHeightAt(xValue);
            Vector2 blockTopLeft = new Vector2(xValue, groundHeightAtX);
            Block newBlock = new Block(blockTopLeft, rectangleRenderable);
            gameObjects.addGameObject(newBlock, groundLayer);
            addGroundBeneath(xValue, rectangleRenderable, groundHeightAtX);

        }
    }

    /**
     * Adds ground beneath the ground generated by the perlin noise algorithm.
     * @param xValue current x coordinate of the ground.
     * @param rectangleRenderable renderable of the blocks.
     * @param groundHeightAtX ground height (y coordinate) at current x coordinate
     */
    private void addGroundBeneath(int xValue, RectangleRenderable rectangleRenderable,
                                  float groundHeightAtX) {
        for (int i = 0; i < TERRAIN_DEPTH; i++) {
            Vector2 underlyingBlockCoords = new Vector2(xValue, groundHeightAtX + Block.SIZE * i);
            Block underlyingBlock = new Block(underlyingBlockCoords, rectangleRenderable);
            gameObjects.addGameObject(underlyingBlock, groundLayer+1);

        }
    }
}